(set-option :print-success false)
;(get-info :all-statistics)

(set-logic UFNIA)

(declare-sort Char 0)
(declare-sort String 0)

(declare-fun _a_ () Char)
(declare-fun _b_ () Char)
(declare-fun _c_ () Char)
(declare-fun _d_ () Char)
(declare-fun _e_ () Char)
(declare-fun _f_ () Char)
(declare-fun _g_ () Char)
(declare-fun _h_ () Char)
(declare-fun _i_ () Char)
(declare-fun _j_ () Char)
(declare-fun _k_ () Char)
(declare-fun _l_ () Char)
(declare-fun _m_ () Char)
(declare-fun _n_ () Char)
(declare-fun _o_ () Char)
(declare-fun _p_ () Char)
(declare-fun _q_ () Char)
(declare-fun _r_ () Char)
(declare-fun _s_ () Char)
(declare-fun _t_ () Char)
(declare-fun _u_ () Char)
(declare-fun _v_ () Char)
(declare-fun _w_ () Char)
(declare-fun _x_ () Char)
(declare-fun _y_ () Char)
(declare-fun _z_ () Char)
(declare-fun _0_ () Char)
(declare-fun _1_ () Char)
(declare-fun _2_ () Char)
(declare-fun _3_ () Char)
(declare-fun _4_ () Char)
(declare-fun _5_ () Char)
(declare-fun _6_ () Char)
(declare-fun _7_ () Char)
(declare-fun _8_ () Char)
(declare-fun _9_ () Char)
(declare-fun __ () Char)
(declare-fun _period_ () Char)
(declare-fun _comma_ () Char)
(declare-fun _colon_ () Char)
(declare-fun _fwdslash_ () Char)
(declare-fun _underscore_ () Char)
(declare-fun _dblquote_ () Char)
(declare-fun _siglequote_ () Char)
(declare-fun _backslash_ () Char)
(declare-fun _dash_ () Char)
(declare-fun _question_ () Char)
(declare-fun _openparen_ () Char)
(declare-fun _closeparen_ () Char)
(declare-fun _semicolon_ () Char)
(declare-fun _lcurly_ () Char)
(declare-fun _rcurly_ () Char)
(declare-fun _equals_ () Char)
(declare-fun _at_ () Char)
(declare-fun _lbracket_ () Char)
(declare-fun _rbracket_ () Char)
(declare-fun _amp_ () Char)
(declare-fun _excl_ () Char)
(declare-fun _pound_ () Char)
(declare-fun _percent_ () Char)

(assert (distinct __ _a_ _b_ _c_ _d_ _e_ _f_ _g_ _h_ _i_ _j_ _k_ _l_ _m_ _n_ _o_ _p_ _q_ _r_ _s_ _t_ _u_ _v_ _w_ _x_ _y_ _z_ _0_ _1_ _2_ _3_ _4_ _5_ _6_ _7_ _8_ _9_ _period_ _comma_ _colon_ _fwdslash_ _underscore_ _dblquote_ _siglequote_ _backslash_ _dash_ _question_ _openparen_ _closeparen_ _semicolon_ _lcurly_ _rcurly_ _equals_ _at_ _lbracket_ _rbracket_ _amp_ _excl_ _pound_ _percent_))

; getter functions for the string
(declare-fun length ( String ) Int )
(declare-fun charOf (String Int) Char)

;extensionality
(assert (forall ((s1 String) (s2 String))
                (=> (and 
                     (= (length s1) (length s2))
                     (forall ((i Int))
                             (=> (and (<= 0 i) (< i (length s1)))
                                 (= (charOf s1 i) (charOf s2 i)))))
                    (= s1 s2))))
                    (declare-fun result61772 () Int)
(declare-fun int16351 () Int)
(declare-fun input () String)
(declare-fun filename61772 () String)
(declare-fun result69867 () String)
(declare-fun output () String)
(declare-fun char28035 () Char)
(assert (>= (length output) 0))
(assert (= (charOf filename61772 result61772) char28035))
(assert (>= 0 0))
(assert (< 0 (length filename61772)))
(assert (= (- result61772 int16351) (length result69867)))
(assert (>= (length input) 0))
(assert (<= 0 result61772))	
(assert (>= result61772 0))
(assert (forall ((index Int)) (=> (and (< index result61772) (>= index int16351)) (= (charOf input index)  (charOf result69867(- index int16351))))))
(assert (>= (length filename61772) 0))
(assert (= char28035 _period_))
(assert (<= result61772 (length input)))
(assert (= int16351 0))
(assert (= input filename61772))
(assert(forall ((check Int))(=>(and (< check result61772)(>= check 0))(not (= (charOf filename61772 check) char28035)))))
(assert (< result61772 (length filename61772)))
(assert (>= int16351 0))
(assert (< int16351 result61772))
(assert (= output result69867))
(assert (<= 0 (- (length input)(length result69867))))
(echo" string classname = filename.substring(0, filename.indexof('.'));")
(assert (= (charOf input 2) _i_ ))
(assert (= (charOf input 3) _m_ ))
(assert (= (charOf output 2) _i_ ))
(assert (= (charOf input 0) _a_ ))
(assert (= (charOf output 0) _a_ ))
(assert (= (charOf output 1) _n_ ))
(assert (= (charOf input 8) _o_ ))
(assert (= (charOf output 5) _l_ ))
(assert (= input input))
(assert (= (charOf input 6) _period_ ))
(assert (= (charOf input 5) _l_ ))
(assert (= (length output) 6))
(assert (= (charOf input 7) _d_ ))
(assert (= output output))
(assert (= (charOf input 1) _n_ ))
(assert (= (charOf input 9) _g_ ))
(assert (= (charOf input 4) _a_ ))
(assert (= (charOf output 3) _m_ ))
(assert (= (length input) 10))
(assert (= (charOf output 4) _a_ ))
(check-sat)
(get-model)
(exit)
